Para todas as questões, compile-as com o gcc e execute-as via terminal.

1. Crie um "Olá mundo!" em C.

#include <stdio.h>
#include <stdlib.h>
int main (void)
{
    printf("Ola Mundo!!!\n");
    return 0;
}

2. Crie um código em C que pergunta ao usuário o seu nome, e imprime no terminal "Ola " e o nome do usuário. Por exemplo, considerando que o código criado recebeu o nome de 'ola_usuario_1':
	$ ./ola_usuario_1
	$ Digite o seu nome: Eu
	$ Ola Eu
	$

#include <stdio.h>
#include <stdlib.h>

int main (void)
{
char nome[10];
printf("Digite o seu nome: ");
scanf("%s", nome); 
printf("Ola %s \n", nome);
return 0;

}

3. Apresente os comportamentos do código anterior nos seguintes casos:
	(a) Se o usuário insere mais de um nome.
		$ ./ola_usuario_1 Eu Mesmo

	Resposta: Ola Eu

	(b) Se o usuário insere mais de um nome entre parênteses. Por exemplo:
		$ ./ola_usuario_1 "Eu Mesmo"

	Resposta: ola "eu 	
	
	(c) Se é usado um pipe. Por exemplo:
		$ echo Eu | ./ola_usuario_1
	
	Resposta: A frase Ola Eu foi exibida antes que o programa pergunte o nome

	(d) Se é usado um pipe com mais de um nome. Por exemplo:
		$ echo Eu Mesmo | ./ola_usuario_1

	Resposta:A frase Ola Eu (sem o segundo nome) foi exibida antes que o programa pergunte o nome

	(e) Se é usado um pipe com mais de um nome entre parênteses. Por exemplo:
		$ echo Eu Mesmo | ./ola_usuario_1
	
	Resposta: Ola Eu (sem aspas)

	(f) Se é usado o redirecionamento de arquivo. Por exemplo:
		$ echo Ola mundo cruel! > ola.txt
		$ ./ola_usuario_1 < ola.txt

	Resposta: O primeiro comando cria um arquivo .txt com o conteúdo da frase  "Ola mundo cruel". O segundo comando executa o programa ola_nome.c com o conteúdo do ola.txt exibindo apenas o primeiro nome do arquivo.

4. Crie um código em C que recebe o nome do usuário como um argumento de entrada (usando as variáveis argc e *argv[]), e imprime no terminal "Ola " e o nome do usuário. Por exemplo, considerando que o código criado recebeu o nome de 'ola_usuario_2':
	$ ./ola_usuario_2 Eu
	$ Ola Eu
	$

#include <stdio.h>
#include <stdlib.h>

int main (int argc, char **argv)
{
printf("Ola %s\n", argv[1]); // o argumento de argv indica a ordem das palavras no terminal
return 0;
}


5. Apresente os comportamentos do código anterior nos seguintes casos:
	(a) Se o usuário insere mais de um nome.
		$ ./ola_usuario_2 Eu Mesmo

	Resposta: Ola Eu

	(b) Se o usuário insere mais de um nome entre parênteses. Por exemplo:
		$ ./ola_usuario_2 "Eu Mesmo"

	Resposta: Ola eu mesmo	

	(c) Se é usado um pipe. Por exemplo:
		$ echo Eu | ./ola_usuario_2

	Resposta: Ola (null)

	(d) Se é usado um pipe com mais de um nome. Por exemplo:
		$ echo Eu Mesmo | ./ola_usuario_2

	Resposta: Ola (null)

	(e) Se é usado um pipe com mais de um nome entre parênteses. Por exemplo:
		$ echo Eu Mesmo | ./ola_usuario_2

	Resposta: Ola (null)	

	(f) Se é usado o redirecionamento de arquivo. Por exemplo:
		$ echo Ola mundo cruel! > ola.txt
		$ ./ola_usuario_2 < ola.txt

	Resposta: Ola (null)

6. Crie um código em C que faz o mesmo que o código da questão 4, e em seguida imprime no terminal quantos valores de entrada foram fornecidos pelo usuário. Por exemplo, considerando que o código criado recebeu o nome de 'ola_usuario_3':
	$ ./ola_usuario_3 Eu
	$ Ola Eu
	$ Numero de entradas = 2
	$

#include <stdio.h>
#include <stdlib.h>

int main (int argc, char **argv)
{
printf("Ola %s\n", argv[1]);
printf("Numero de entradas = %d \n", argc);

return 0;
}


7. Crie um código em C que imprime todos os argumentos de entrada fornecidos pelo usuário. Por exemplo, considerando que o código criado recebeu o nome de 'ola_argumentos':
	$ ./ola_argumentos Eu Mesmo e Minha Pessoa
	$ Argumentos: Eu Mesmo e Minha Pessoa
	$


8. Crie uma função que retorna a quantidade de caracteres em uma string, usando o seguinte protótipo:

	int Num_Caracs(char *string);

Salve-a em um arquivo separado chamado 'num_caracs.c'. Salve o protótipo em um arquivo chamado 'num_caracs.h'. Compile 'num_caracs.c' para gerar o objeto 'num_caracs.o'.

#include <stdio.h>
#include <stdlib.h>

int Num_Caracs(char *string)
{
int i;
for(i = 0; string[i]!= '\0'; i++){
	}
return i;
}

int main(){

char nome[30];
scanf("%s", nome);
int i = Num_Caracs(nome);
printf("quantidade: %d \n", i);
return 0;
} 

9. Re-utilize o objeto criado na questão 8 para criar um código que imprime cada argumento de entrada e a quantidade de caracteres de cada um desses argumentos. Por exemplo, considerando que o código criado recebeu o nome de 'ola_num_caracs_1':
	$ ./ola_num_caracs_1 Eu Mesmo
	$ Argumento: ./ola_num_caracs_1 / Numero de caracteres: 18
	$ Argumento: Eu / Numero de caracteres: 2
	$ Argumento: Mesmo / Numero de caracteres: 5
	$

10. Crie um Makefile para a questão anterior.

11. Re-utilize o objeto criado na questão 8 para criar um código que imprime o total de caracteres nos argumentos de entrada. Por exemplo, considerando que o código criado recebeu o nome de 'ola_num_caracs_2':
	$ ./ola_num_caracs_2 Eu Mesmo
	$ Total de caracteres de entrada: 25
	$

12. Crie um Makefile para a questão anterior.
